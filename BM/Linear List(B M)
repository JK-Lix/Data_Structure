=====================================线性表=====================================
顺序表:
  通常用一位数组实现，可以时静态分配，也可以是动态分配：
	静态分配时，由于数组大小和空间固定，一旦空间沾满，就无法再新增数据，否则会溢出
	动态分配时，存储数组的空间在程序执行过程中会动态调整大小，当空间占满时，可以另行开辟更大的存储空间来存储数据。

　　特点：可以随机访问，即可以通过表头元素的地址和元素的而编号（下标），在Ｏ(1)的时间复杂度内找到制定的元素。
　　缺点：插入和删除操作需要移动大量的元素，从而保持逻辑上和物理上的连续性

顺序表操作函数：
insert(loc, value)　将value插入到顺序表中下标为loc的位置  时间复杂度：O(n)
	实现方法：
		1. 判断插入位置是否合法。
		2. 判断顺序表是否已满。
		3. 将目标位置及之后的元素后移一位。
		4. 将待插入的元素值插入到目标位置。

expand()	   扩大顺序表的容量  时间复杂度：O(n)
	实现方法：
		1. 将原来的元素存储到临时存储空间。
		2. 扩大原来的存储空间。
		3. 将临时存储空间里的数据元素复制到新的存储空间里。
		4. 释放临时的存储空间。
-----以上两方法详见(linearlist0.c)

search(value)      寻找顺序表中值为value的元素  时间复杂度：O(n)
	实现方法：
		1. 从下标为 0 的元素开始依次枚举顺序表中的所有元素。
		2. 发现和目标值相等的元素则返回它的下标。
		3. 枚举结束没有找到目标元素则返回 -1。

remove(index)	   将顺序表中的下标index的元素移除  时间复杂度：O(n)
	实现方法：
		1. 判断传入的参数是否合法，即下标是否在顺序表的范围内。
		2. 将目标下标之后所有的元素前移一位。
		3. 更新顺序表的长度。

print()		   输出顺序标中的所有元素  时间复杂度：O(n)
	实现方法：
		1. 从下标为 0 的元素开始遍历顺序表。
		2. 输出所有元素的值。
